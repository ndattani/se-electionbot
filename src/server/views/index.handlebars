{{> navigation routes=data/routes password=data/password path=data/path instances=data/instances }}

<h1 class="fs-4">{{{heading}}}</h1>

{{#with data}}
<blockquote>
    <p>I am <strong>{{{url botconfig/repoUrl "ElectionBot"}}}</strong>, a chatbot that can answer commonly-asked questions about elections for sites on the Stack Exchange network.</p>
    <p>This instance is listening to <strong>{{{url chatRoomUrl}}}</strong>.</p>
    <p>The bot is {{#if isBotInRoom}}{{else}}<strong>not</strong> {{/if}}in the room.</p>
</blockquote>

<main class="dashboard row">

    {{#with election}}
    <section class="col-auto">

        <h2 class="fs-4">Election Info</h2>
        <table>
            <tr><td>Last updated</td><td>{{> relativetime date=updated}}</td></tr>
            <tr><td>Site</td><td>{{siteName}}</td></tr>
            <tr>
                <td>Type</td>
                <td>{{getter this "electionType"}}</td>
            </tr>
            <tr><td>Hostname</td><td>{{{url (getter @root/data/election "siteUrl")}}}</td></tr>
            <tr>
                <td>Is Stack Overflow</td>
                <td>{{{boolean (contextCall "isStackOverflow" this)}}}</td>
            </tr>
            <tr><td>Election Title</td><td>{{title}}</td></tr>
            <tr><td>Election URL</td><td>{{{url electionUrl}}}</td></tr>
            <tr><td>Election Chat</td>
                {{#if chatUrl}}
                <td>{{{url chatUrl}}}</td>
                {{else}}
                <td></td>
                {{/if}}
            </tr>
            <tr><td>Current phase</td>
                {{#if phase}}
                <td><strong>{{phase}}</strong></td>
                {{else}}
                <td></td>
                {{/if}}
            </tr>
            <tr><td>Nomination date</td><td>{{> relativetime date=dateNomination}}</td></tr>
            <tr><td>Primary date</td><td>{{#if datePrimary}}{{> relativetime date=datePrimary}}{{/if}}</td></tr>
            <tr><td>Election date</td><td>{{> relativetime date=dateElection}}</td></tr>
            <tr><td>End date</td><td>{{> relativetime date=dateEnded}}</td></tr>
            <tr><td>Cancelled date</td><td>{{#if dateCancelled}}{{> relativetime date=dateCancelled}}{{/if}}</td></tr>
            <tr><td>Cancelled text</td><td>{{#if cancelledText}}<pre>{{cancelledText}}</pre>{{/if}}</td></tr>
            <tr><td>Rep. to vote</td><td>{{repVote}}</td></tr>
            <tr><td>Rep. to nominate</td><td>{{repNominate}}</td></tr>
            <tr><td>Positions</td><td>{{numPositions}}</td></tr>
            <tr><td>Opavote URL</td><td>{{{url opavoteUrl}}}</td></tr>
            <tr><td>Voter stats</td><td>{{statVoters}}</td></tr>
            <tr><td>BLT file URL</td><td>{{{url (getter this "electionBallotURL")}}}</td></tr>
        </table>

        <h2 class="fs-4">Election History</h2>
        {{#if (len elections)}}
        <table class="table-small">
            <thead>
                <tr>
                    <th>Link</th>
                    <th>Year</th>
                    <th>Primary</th>
                    <th>Cancelled</th>
                    <th>Positions</th>
                    <th>Nominees</th>
                    <th>Withdrawn</th>
                    <th>Winners</th>
                </tr>
            </thead>
            <tbody>
            {{#iterate elections}}
            <tr>
                <td>
                    <a href="{{val/electionUrl}}">{{getter val "electionNum"}}</a>
                    {{#ifEquals (getter val "electionNum") (getter @root/data/election "electionNum")}}<span title="Current Election">*</span>{{/ifEquals}}
                </td>
                <td>{{year val/dateNomination}}</td>
                <td>{{{yesno val/datePrimary}}}</td>
                <td>{{{yesno (contextCall "isCancelled" val)}}}</td>
                <td>{{val/numPositions}}</td>
                <td>{{len val/nominees}}</td>
                <td>{{len val/withdrawnNominees}}</td>
                <td>{{len val/winners}}</td>
            </tr>
            {{/iterate}}
            </tbody>
        </table>
        {{else}}
            {{> emptySmallTable }}
        {{/if}}

        <h2 class="fs-4">Election Announcements</h2>
        {{#if (len announcements)}}
        <table class="table-small">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Announced On</th>
                    <th>Nomination Date</th>
                    <th>Author</th>
                    <th>Title</th>
                </tr>
            </thead>
            <tbody>
                {{#each (values announcements)}}
                <tr>
                    <td>{{type}}</td>
                    <td>{{utcTimestamp dateAnnounced}}</td>
                    <td>{{utcTimestamp dateNomination}}</td>
                    <td>{{{url userLink userName}}}</td>
                    <td>{{{url postLink postTitle}}}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
        {{else}}
            {{> emptySmallTable }}
        {{/if}}

        <h2 class="fs-4">Candidates <span class="small-count" data-prefix="(" data-suffix=")">{{len nominees}} total, {{len @root/data/nomineesInRoom}} in the room</span></h2>
        {{> nominees (values nominees) }}

        {{> totalsTableHeader header="Withdrawn" collection=withdrawnNominees }}
        {{> nominees (values withdrawnNominees) }}

        {{> totalsTableHeader header="Winners" collection=winners }}
        {{> nominees (values winners) }}

    </section>
    {{/with}}

    {{#with election}}
    <section class="col-auto">

        {{> moderatorTable header="Current Moderators" election=@root/data/election key="currentModerators" }}
        {{> moderatorTable header="Former Moderators" election=@root/data/election key="formerModerators" }}

        {{#if (len (getter this "requiredBadges"))}}
        {{> badgesTable election=@root/data/election status="required" type="all" header="Required Badges" }}
        {{/if}}

        {{> badgesTable election=@root/data/election status="all" type="editing" header="Editing Badges" }}
        {{> badgesTable election=@root/data/election status="all" type="moderation" header="Moderation Badges" }}
        {{> badgesTable election=@root/data/election status="all" type="participation" header="Participation Badges" }}

    </section>
    {{/with}}

    {{#with botconfig}}
    <section class="col-auto">

        <h2 class="fs-4">Bot Config</h2>
        <table>
            <tr><td>scriptHostname</td><td>{{{url scriptHostname}}}</td></tr>
            <tr><td>scriptInitDate</td><td>{{> relativetime date=scriptInitDate}}</td></tr>
            <tr>
                <td>SE API quota</td>
                <td id="api-quota"></td>
            </tr>
            <tr><td>Control Room</td><td>{{{url controlRoomUrl}}}</td></tr>
            <tr><td>Display Name</td><td>{{chatDisplayName}}</td></tr>
            <tr><td>Is Muted</td><td>{{{boolean isMuted}}} {{#if isMuted}}{{> relativetime date=unmutesAt short=true prefix="for "}}{{/if}}</td></tr>
            <tr><td>throttleSecs</td><td>{{throttleSecs}} secs</td></tr>
            <tr><td>scrapeIntervalMins</td><td>{{scrapeIntervalMins}} mins</td></tr>
            <tr><td>electionAfterpartyMins</td><td>{{electionAfterpartyMins}} mins</td></tr>
            <tr><td>duplicateResponseText</td><td>{{duplicateResponseText}}</td></tr>
            <tr><td>maxMessageLength</td><td>{{maxMessageLength}}</td></tr>
            <tr><td>maxMessageParts</td><td>{{maxMessageParts}}</td></tr>
            <tr>
                <td>showTranscriptMessages</td>
                <td>{{showTranscriptMessages}}</td>
            </tr>
            <tr><td>keepAlive</td><td>{{{boolean keepAlive}}}</td></tr>
            <tr><td>feedbackUrl</td><td>{{{url feedbackUrl "feedback form"}}}</td></tr>
            <tr><td>repoUrl</td><td>{{{url repoUrl}}}</td></tr>
            <tr><td>flags</td><td>{{> deep flags}}</td></tr>
        </table>

        <h2 class="fs-4">Scheduled Announcements</h2>
        <table class="table-small">
            <thead hidden>
                <tr>
                    <th>Type</th>
                    <th>Cron</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody id="cron"></tbody>
        </table>

        {{#if herokuDynos.length}}
            <h2 class="fs-4">Hosting (Heroku Dynos)</h2>
            <table>
                {{#each herokuDynos}}
                <tr>
                    <td>{{@key}}</td>
                    {{#if (isObj this)}}
                    <td>{{> deep this}}</td>
                    {{else}}
                    <td>{{this}}</td>
                    {{/if}}
                </tr>
                {{/each}}
            </table>
        {{/if}}

    </section>
    {{/with}}

    {{#with botconfig}}
    <section class="col-auto">

        <h2 class="fs-4">Room Activity</h2>
        <table>
            <tr><td>Bot</td><td>
                <table class="nested">
                    <tr><td>lastMessageTime</td><td>{{#if lastMessageTime}}{{> relativetime date=lastMessageTime}}{{/if}}</td></tr>
                    <tr>
                        <td>lastBotMessage</td>
                        {{#if lastBotMessage}}
                        <td>
                            <pre>{{lastBotMessage}}</pre>
                            <div class="mt-2">{{{lastBotMessageHtml}}}</div>
                        </td>
                        {{else}}
                        <td></td>
                        {{/if}}
                    </tr>
                    <tr><td>botSentLastMessage</td><td>{{{boolean botSentLastMessage}}}</td></tr>
                    <tr><td>botHasBeenQuiet</td>
                    <td>{{{boolean botHasBeenQuiet}}}
                        {{#unless botHasBeenQuiet}}{{> relativetime date=botWillBeQuietDate short=true}}{{/unless}}
                    </td></tr>
                    <tr><td>ignoreSelf</td><td>{{{boolean ignoreSelf}}}</td></tr>
                </table>
            </td></tr>

            <tr><td>Activity</td><td>
                <table class="nested">
                    <tr><td>lastActivityTime</td><td>{{> relativetime date=lastActivityTime}}</td></tr>
                    <tr><td>activityCounter</td><td>{{activityCounter}}</td></tr>
                    <tr><td>minActivityCountThreshold</td><td>{{minActivityCountThreshold}}</td></tr>
                    <tr><td>roomReachedMinActivityCount</td><td>{{{boolean roomReachedMinActivityCount}}}</td></tr>
                    <tr><td>maxActivityCountThreshold</td><td>{{maxActivityCountThreshold}}</td></tr>
                    <tr><td>roomReachedMaxActivityCount</td><td>{{{boolean roomReachedMaxActivityCount}}}</td></tr>
                </table>
            </td></tr>

            <tr><td>Room Idle</td><td>
                <table class="nested">
                    <tr><td>shortIdleDurationMins</td><td>{{shortIdleDurationMins}} mins</td></tr>
                    <tr><td>roomBecameIdleAWhileAgo</td><td>{{{boolean roomBecameIdleAWhileAgo}}}
                        {{#unless roomBecameIdleAWhileAgo}}{{> relativetime date=roomBecameIdleAWhileDate short=true}}{{/unless}}
                    </td></tr>
                    <tr><td>longIdleDurationHours</td><td>{{longIdleDurationHours}} hours</td></tr>
                    <tr><td>roomBecameIdleHoursAgo</td><td>{{{boolean roomBecameIdleHoursAgo}}}
                        {{#unless roomBecameIdleHoursAgo}}{{> relativetime date=roomBecameIdleHoursDate short=true}}{{/unless}}
                    </td></tr>
                    <tr><td>shortBusyDurationMinutes</td><td>{{shortBusyDurationMinutes}} mins</td></tr>
                    <tr><td>roomTooBusyForMinutes</td><td>{{{boolean roomTooBusyForMinutes}}}</td></tr>
                    <tr><td>longBusyDurationHours</td><td>{{longBusyDurationHours}} hours</td></tr>
                    <tr><td>roomTooBusyForHours</td><td>{{{boolean roomTooBusyForHours}}}</td></tr>
                    <tr><td>lowActivityCheckMins</td><td>{{lowActivityCheckMins}} mins</td></tr>
                </table>
            </td></tr>

            <tr><td>Fun</td><td>
                <table class="nested">
                    <tr><td>funResponseCounter</td><td>{{funResponseCounter}}</td></tr>
                    <tr><td>maxFunResponses</td><td>{{maxFunResponses}}</td></tr>
                    <tr><td>canSendFunResponse</td><td>{{{boolean canSendFunResponse}}}</td></tr>
                </table>
            </td></tr>
        </table>

    </section>
    {{/with}}

</main>
{{/with}}

<base target="_blank" />
<noscript>
    <meta http-equiv="refresh" content="{{data/autoRefreshInterval}}" />
</noscript>

<script>
(() => {
    const qtyRealtime = new EventSource(`${location.origin}/realtime?type=quota`);
    qtyRealtime.addEventListener("quota", (event) => {
        const { data } = event;

        const quotaCell = document.getElementById("api-quota");
        if(quotaCell) {
            quotaCell.textContent = data;
        }
    });

    const schRealtime = new EventSource(`${location.origin}/realtime?type=cron`);
    schRealtime.addEventListener("schedules", (event) => {
        const { data } = event;

        /** @type {[type:string, cronexpr:string][]} */
        const schedules = JSON.parse(data);

        /** @type {HTMLTableSectionElement|undefined} */
        const cronTbody = document.getElementById("cron");
        if(!cronTbody) return;

        const cronThead = cronTbody.previousElementSibling;

        const rows = schedules.map(([type, cron, date]) => {
            const row = document.createElement("tr");

            const typeCell = document.createElement("td");
            typeCell.textContent = type;

            const cronCell = document.createElement("td");
            cronCell.textContent = cron;
            cronCell.classList.add('text-nowrap');

            const dateCell = document.createElement("td");
            dateCell.textContent = date;

            row.append(typeCell, cronCell, dateCell);
            return row;
        });

        for(const row of cronTbody.rows) row.remove();

        if(!rows.length) {
            cronThead.hidden = true;

            const emptyRow = document.createElement("tr");
            const emptyCell = document.createElement("td");
            emptyCell.colSpan = 3;

            emptyRow.append(emptyCell);
            cronTbody.append(emptyRow);
            return;
        }

        cronThead.hidden = false;
        cronTbody.append(...rows);
    });

    schRealtime.addEventListener("error", (event) => {
        console.debug(event);
        schRealtime.close();
    });

    qtyRealtime.addEventListener("error", (event) => {
        console.debug(event);
        qtyRealtime.close();
    });

    const refreshRealtime = new EventSource(`${location.origin}/realtime?type=refresh`);
    refreshRealtime.addEventListener("message", () => {
        schRealtime.close();
        qtyRealtime.close();
        refreshRealtime.close();
        location.reload();
    });

    refreshRealtime.addEventListener("error", (event) => {
        console.debug(event);
        refreshRealtime.close();
    });
})();
</script>